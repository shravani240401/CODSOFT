#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


# In[2]:


# load the data from csv file to Pandas DataFrame
titanic_data = pd.read_csv('tested.csv')


# In[3]:


# printing the first 5 rows of the dataframe
titanic_data.head()


# In[4]:


# number of rows and Columns
titanic_data.shape


# In[5]:


# getting some informations about the data
titanic_data.info()


# In[6]:


# check the number of missing values in each column
titanic_data.isnull().sum()


# In[7]:


# drop the "Cabin" column from the dataframe
titanic_data = titanic_data.drop(columns='Cabin', axis=1)


# In[8]:


# replacing the missing values in "Age" column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)


# In[9]:


# finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())


# In[10]:


print(titanic_data['Embarked'].mode()[0])


# In[11]:


# replacing the missing values in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)


# In[12]:


# check the number of missing values in each column
titanic_data.isnull().sum()


# In[13]:


# getting some statistical measures about the data
titanic_data.describe()


# In[14]:


# finding the number of people survived and not survived
titanic_data['Survived'].value_counts()


# In[15]:


sns.set()


# In[17]:


titanic_data['Sex'].value_counts()


# In[20]:


import seaborn as sns
import matplotlib.pyplot as plt


# In[22]:


import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Load the Titanic dataset into a DataFrame
titanic_data = pd.read_csv('tested.csv')

# Create the countplot
sns.countplot(x='Pclass', hue='Survived', data=titanic_data)
plt.show()  # To display the plot


# In[23]:


titanic_data['Sex'].value_counts()


# In[25]:


sns.countplot(x=titanic_data['Pclass'], hue=titanic_data['Survived'])


# In[26]:


import seaborn as sns
import matplotlib.pyplot as plt

# Create the countplot
sns.countplot(x='Sex', hue='Survived', data=titanic_data)
plt.show()  # To display the plot


# In[27]:


sns.countplot(x=titanic_data['Pclass'])


# In[29]:


import seaborn as sns
import matplotlib.pyplot as plt

# Assuming you have a DataFrame called 'titanic_data'
sns.countplot(x='Pclass', hue='Survived', data=titanic_data)
plt.show()  # Display the plot


# In[30]:


titanic_data['Sex'].value_counts()


# In[31]:


titanic_data['Embarked'].value_counts()


# In[32]:


# converting categorical Columns

titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)


# In[33]:


titanic_data.head()


# In[34]:


X = titanic_data.drop(columns = ['PassengerId','Name','Ticket','Survived'],axis=1)
Y = titanic_data['Survived']


# In[35]:


print(X)


# In[36]:


print(Y)


# In[37]:


X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)


# In[38]:


print(X.shape, X_train.shape, X_test.shape)


# In[102]:


titanic_data['Age'].fillna(titanic_data['Age'].median(), inplace=True)


# In[103]:


titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)


# In[105]:


from sklearn.preprocessing import LabelEncoder, StandardScaler
label_encoder = LabelEncoder()
titanic_data['Sex'] = label_encoder.fit_transform(titanic_data['Sex'])
titanic_data['Embarked'] = label_encoder.fit_transform(titanic_data['Embarked'])


# In[106]:


X = titanic_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]
y = titanic_data['Survived']


# In[107]:


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# In[108]:


scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


# In[111]:


import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# ... Previous code for data preprocessing ...

# Convert X_train and X_test to NumPy arrays
X_train = np.array(X_train)
X_test = np.array(X_test)

# Check for missing values in X_train
missing_values = np.isnan(X_train).sum()
print("Missing values in X_train:", missing_values)

# Replace missing values in X_train with the median of each column
column_medians = np.nanmedian(X_train, axis=0)
nan_columns = np.isnan(X_train)
X_train[nan_columns] = np.take(column_medians, np.where(nan_columns)[1])

# Check for missing values again
missing_values_after_fill = np.isnan(X_train).sum()
print("Missing values in X_train after filling:", missing_values_after_fill)

# Build and train a Logistic Regression model
clf = LogisticRegression(random_state=42)
clf.fit(X_train, y_train)

# Make predictions on the test set (X_test should also be preprocessed and missing values filled if necessary)
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Model accuracy:", accuracy)


# In[117]:


clf = LogisticRegression(random_state=42)
clf.fit(X_train, y_train)


# In[113]:


y_pred = clf.predict(X_test)


# In[114]:


accuracy = accuracy_score(y_test, y_pred)
print("Model accuracy:", accuracy)


# In[115]:


print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))


# In[116]:


print("\nClassification Report:")
print(classification_report(y_test, y_pred))


# In[ ]:





